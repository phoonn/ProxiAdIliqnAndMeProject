//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Testing.LaptopService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LaptopService.ICrudServiceOf_Laptop")]
    public interface ICrudServiceOf_Laptop {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrudServiceOf_Laptop/GetAllLaptops", ReplyAction="http://tempuri.org/ICrudServiceOf_Laptop/GetAllLaptopsResponse")]
        Models.Laptop[] GetAllLaptops();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrudServiceOf_Laptop/GetAllLaptops", ReplyAction="http://tempuri.org/ICrudServiceOf_Laptop/GetAllLaptopsResponse")]
        System.Threading.Tasks.Task<Models.Laptop[]> GetAllLaptopsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrudServiceOf_Laptop/GetLaptopById", ReplyAction="http://tempuri.org/ICrudServiceOf_Laptop/GetLaptopByIdResponse")]
        Models.Laptop GetLaptopById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrudServiceOf_Laptop/GetLaptopById", ReplyAction="http://tempuri.org/ICrudServiceOf_Laptop/GetLaptopByIdResponse")]
        System.Threading.Tasks.Task<Models.Laptop> GetLaptopByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICrudServiceOf_Laptop/DeleteLaptop")]
        void DeleteLaptop(Models.Laptop entity);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICrudServiceOf_Laptop/DeleteLaptop")]
        System.Threading.Tasks.Task DeleteLaptopAsync(Models.Laptop entity);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICrudServiceOf_Laptop/DeleteLaptopById")]
        void DeleteLaptopById(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICrudServiceOf_Laptop/DeleteLaptopById")]
        System.Threading.Tasks.Task DeleteLaptopByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICrudServiceOf_Laptop/CreateLaptop")]
        void CreateLaptop(Models.Laptop entity);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICrudServiceOf_Laptop/CreateLaptop")]
        System.Threading.Tasks.Task CreateLaptopAsync(Models.Laptop entity);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICrudServiceOf_Laptop/Update")]
        void Update(Models.Laptop entity);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICrudServiceOf_Laptop/Update")]
        System.Threading.Tasks.Task UpdateAsync(Models.Laptop entity);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICrudServiceOf_LaptopChannel : Testing.LaptopService.ICrudServiceOf_Laptop, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CrudServiceOf_LaptopClient : System.ServiceModel.ClientBase<Testing.LaptopService.ICrudServiceOf_Laptop>, Testing.LaptopService.ICrudServiceOf_Laptop {
        
        public CrudServiceOf_LaptopClient() {
        }
        
        public CrudServiceOf_LaptopClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CrudServiceOf_LaptopClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CrudServiceOf_LaptopClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CrudServiceOf_LaptopClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Models.Laptop[] GetAllLaptops() {
            return base.Channel.GetAllLaptops();
        }
        
        public System.Threading.Tasks.Task<Models.Laptop[]> GetAllLaptopsAsync() {
            return base.Channel.GetAllLaptopsAsync();
        }
        
        public Models.Laptop GetLaptopById(int id) {
            return base.Channel.GetLaptopById(id);
        }
        
        public System.Threading.Tasks.Task<Models.Laptop> GetLaptopByIdAsync(int id) {
            return base.Channel.GetLaptopByIdAsync(id);
        }
        
        public void DeleteLaptop(Models.Laptop entity) {
            base.Channel.DeleteLaptop(entity);
        }
        
        public System.Threading.Tasks.Task DeleteLaptopAsync(Models.Laptop entity) {
            return base.Channel.DeleteLaptopAsync(entity);
        }
        
        public void DeleteLaptopById(int id) {
            base.Channel.DeleteLaptopById(id);
        }
        
        public System.Threading.Tasks.Task DeleteLaptopByIdAsync(int id) {
            return base.Channel.DeleteLaptopByIdAsync(id);
        }
        
        public void CreateLaptop(Models.Laptop entity) {
            base.Channel.CreateLaptop(entity);
        }
        
        public System.Threading.Tasks.Task CreateLaptopAsync(Models.Laptop entity) {
            return base.Channel.CreateLaptopAsync(entity);
        }
        
        public void Update(Models.Laptop entity) {
            base.Channel.Update(entity);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(Models.Laptop entity) {
            return base.Channel.UpdateAsync(entity);
        }
    }
}
